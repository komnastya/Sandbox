# bytes Objects

# A bytes object is an immutable sequence of single byte values. Each element in a bytes object is a small integer in
# the range 0 to 255. A bytes literal is defined in the same way as a string literal with the addition of a 'b' prefix:

b = b'foo, bar, baz'
assert b == b'foo, bar, baz'
assert b'''Contains embedded "double" and 'single' quotes''' == b'Contains embedded "double" and \'single\' quotes'

# Only ASCII characters are allowed in a bytes literal. Any character value greater than 127 must be specified using an
# appropriate escape sequence:
b = b'foo\xddbar'
assert b[3] == 221
assert int(0xdd) == 221

# The 'r' prefix may be used on a bytes literal to disable processing of escape sequences, as with strings:
b = rb'foo\xddbar'
assert b == b'foo\\xddbar'
assert b[3] == 92
assert chr(92) == '\\'

# bytes(<s>, <encoding>) creates a bytes object from a string.
# bytes(<s>, <encoding>) converts string <s> to a bytes object, using str.encode() according to the specified
# <encoding>:
b = bytes('foo.bar', 'utf8')
assert b == b'foo.bar'

# bytes(<size>) creates a bytes object consisting of null (0x00) bytes:
b = bytes(8)
assert b == b'\x00\x00\x00\x00\x00\x00\x00\x00'

# bytes(<iterable>) defines a bytes object from the sequence of integers generated by <iterable>.
# <iterable> must be an iterable that generates a sequence of integers n in the range 0 ≤ n ≤ 255:

b = bytes([100, 102, 104, 106, 108])
assert b == b'dfhjl'
assert b[2] == 104

# Operations on bytes Objects

# Like strings, bytes objects support the common sequence operations:
b = b'abcde'
assert b'cd' in b
assert b'foo' not in b

assert b + b'fghi' == b'abcdefghi'
assert b * 2 == b'abcdeabcde'

assert b[2] == 99
assert b[1:3] == b'bc'

assert len(b) == 5
assert min(b) == 97
assert max(b) == 101

# Many of the methods defined for string objects are valid for bytes objects as well:
b = b'foo,bar,foo,baz,foo,qux'

assert b.count(b'foo') == 3
assert b.endswith(b'qux') is True
assert b.find(b'baz') == 12
assert b.split(sep=b',') == [b'foo', b'bar', b'foo', b'baz', b'foo', b'qux']
assert b.center(30, b'-') == b'---foo,bar,foo,baz,foo,qux----'

# Although a bytes object definition and representation is based on ASCII text, it actually behaves like an immutable
# sequence of small integers in the range 0 to 255, inclusive. That is why a single element from a bytes object is
# displayed as an integer:

b = b'foo\xddbar'
assert b[3] == 221
assert hex(b[3]) == '0xdd'
assert min(b) == 97
assert max(b) == 221

# A slice is displayed as a bytes object though, even if it is only one byte long:
assert b[2:3] == b'c'
# You can convert a bytes object into a list of integers with the built-in list() function:
assert list(b) == [97, 98, 99, 100, 101]

# Hexadecimal numbers are often used to specify binary data because two hexadecimal digits correspond directly to a
# single byte. The bytes class supports two additional methods that facilitate conversion to and from a string of
# hexadecimal digits.

# bytes.fromhex(<s>) returns the bytes object that results from converting each pair of hexadecimal digits in <s> to
# the corresponding byte value. The hexadecimal digit pairs in <s> may optionally be separated by whitespace, which is
# ignored:
b = bytes.fromhex(' aa 68 4682cc ')
assert b == b'\xaahF\x82\xcc'
assert list(b) == [170, 104, 70, 130, 204]

# b.hex() returns the result of converting bytes object b into a string of hexadecimal digit pairs.
# That is, it does the reverse of .fromhex():
assert b.hex() == 'aa684682cc'
# >>> type(b.hex()) >>> <class 'str'>

# bytearray Objects

# bytearray objects are very like bytes objects, despite some differences:
# there is no dedicated syntax built into Python for defining a bytearray literal, like the 'b' prefix that may be used
# to define a bytes object. A bytearray object is always created using the bytearray() built-in function:
ba = bytearray('foo.bar.baz', 'UTF-8')
assert ba == bytearray(b'foo.bar.baz')

ba = bytearray(6)
assert ba == bytearray(b'\x00\x00\x00\x00\x00\x00')
assert bytearray([100, 102, 104, 106, 108]) == bytearray(b'dfhjl')

# bytearray objects are mutable. You can modify the contents of a bytearray object using indexing and slicing:
ba = bytearray('foo.bar.baz', 'UTF-8')
assert ba == bytearray(b'foo.bar.baz')

ba[5] = 0xee
assert ba == bytearray(b'foo.b\xeer.baz')

ba[8:11] = b'qux'
assert ba == bytearray(b'foo.b\xeer.qux')

# A bytearray object may be constructed directly from a bytes object as well:
ba = bytearray(b'foo')
